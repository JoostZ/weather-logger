//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DatabaseModel", "FK_WindDirection_WeatherSnapshot", "WindDirection", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(WeatherLoggerLib.WindDirection), "WeatherSnapshot", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WeatherLoggerLib.WeatherSnapshot), true)]

#endregion

namespace WeatherLoggerLib
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DatabaseEntities1 : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DatabaseEntities1 object using the connection string found in the 'DatabaseEntities1' section of the application configuration file.
        /// </summary>
        public DatabaseEntities1() : base("name=DatabaseEntities1", "DatabaseEntities1")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DatabaseEntities1 object.
        /// </summary>
        public DatabaseEntities1(string connectionString) : base(connectionString, "DatabaseEntities1")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DatabaseEntities1 object.
        /// </summary>
        public DatabaseEntities1(EntityConnection connection) : base(connection, "DatabaseEntities1")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WeatherSnapshot> WeatherSnapshots
        {
            get
            {
                if ((_WeatherSnapshots == null))
                {
                    _WeatherSnapshots = base.CreateObjectSet<WeatherSnapshot>("WeatherSnapshots");
                }
                return _WeatherSnapshots;
            }
        }
        private ObjectSet<WeatherSnapshot> _WeatherSnapshots;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WindDirection> WindDirections
        {
            get
            {
                if ((_WindDirections == null))
                {
                    _WindDirections = base.CreateObjectSet<WindDirection>("WindDirections");
                }
                return _WindDirections;
            }
        }
        private ObjectSet<WindDirection> _WindDirections;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WeatherSnapshots EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWeatherSnapshots(WeatherSnapshot weatherSnapshot)
        {
            base.AddObject("WeatherSnapshots", weatherSnapshot);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WindDirections EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWindDirections(WindDirection windDirection)
        {
            base.AddObject("WindDirections", windDirection);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DatabaseModel", Name="WeatherSnapshot")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WeatherSnapshot : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WeatherSnapshot object.
        /// </summary>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="interval">Initial value of the Interval property.</param>
        /// <param name="indoorHumidity">Initial value of the IndoorHumidity property.</param>
        /// <param name="indoorTemperature">Initial value of the IndoorTemperature property.</param>
        /// <param name="outdoorHumidity">Initial value of the OutdoorHumidity property.</param>
        /// <param name="outdoorTemperature">Initial value of the OutdoorTemperature property.</param>
        /// <param name="pressure">Initial value of the Pressure property.</param>
        /// <param name="windAverage">Initial value of the WindAverage property.</param>
        /// <param name="windGust">Initial value of the WindGust property.</param>
        /// <param name="rain">Initial value of the Rain property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        public static WeatherSnapshot CreateWeatherSnapshot(global::System.DateTime timestamp, global::System.Byte interval, global::System.Byte indoorHumidity, global::System.Double indoorTemperature, global::System.Byte outdoorHumidity, global::System.Double outdoorTemperature, global::System.Double pressure, global::System.Double windAverage, global::System.Double windGust, global::System.Double rain, global::System.Byte status)
        {
            WeatherSnapshot weatherSnapshot = new WeatherSnapshot();
            weatherSnapshot.Timestamp = timestamp;
            weatherSnapshot.Interval = interval;
            weatherSnapshot.IndoorHumidity = indoorHumidity;
            weatherSnapshot.IndoorTemperature = indoorTemperature;
            weatherSnapshot.OutdoorHumidity = outdoorHumidity;
            weatherSnapshot.OutdoorTemperature = outdoorTemperature;
            weatherSnapshot.Pressure = pressure;
            weatherSnapshot.WindAverage = windAverage;
            weatherSnapshot.WindGust = windGust;
            weatherSnapshot.Rain = rain;
            weatherSnapshot.Status = status;
            return weatherSnapshot;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                if (_Timestamp != value)
                {
                    OnTimestampChanging(value);
                    ReportPropertyChanging("Timestamp");
                    _Timestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Timestamp");
                    OnTimestampChanged();
                }
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte Interval
        {
            get
            {
                return _Interval;
            }
            set
            {
                OnIntervalChanging(value);
                ReportPropertyChanging("Interval");
                _Interval = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Interval");
                OnIntervalChanged();
            }
        }
        private global::System.Byte _Interval;
        partial void OnIntervalChanging(global::System.Byte value);
        partial void OnIntervalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte IndoorHumidity
        {
            get
            {
                return _IndoorHumidity;
            }
            set
            {
                OnIndoorHumidityChanging(value);
                ReportPropertyChanging("IndoorHumidity");
                _IndoorHumidity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IndoorHumidity");
                OnIndoorHumidityChanged();
            }
        }
        private global::System.Byte _IndoorHumidity;
        partial void OnIndoorHumidityChanging(global::System.Byte value);
        partial void OnIndoorHumidityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double IndoorTemperature
        {
            get
            {
                return _IndoorTemperature;
            }
            set
            {
                OnIndoorTemperatureChanging(value);
                ReportPropertyChanging("IndoorTemperature");
                _IndoorTemperature = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IndoorTemperature");
                OnIndoorTemperatureChanged();
            }
        }
        private global::System.Double _IndoorTemperature;
        partial void OnIndoorTemperatureChanging(global::System.Double value);
        partial void OnIndoorTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte OutdoorHumidity
        {
            get
            {
                return _OutdoorHumidity;
            }
            set
            {
                OnOutdoorHumidityChanging(value);
                ReportPropertyChanging("OutdoorHumidity");
                _OutdoorHumidity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OutdoorHumidity");
                OnOutdoorHumidityChanged();
            }
        }
        private global::System.Byte _OutdoorHumidity;
        partial void OnOutdoorHumidityChanging(global::System.Byte value);
        partial void OnOutdoorHumidityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double OutdoorTemperature
        {
            get
            {
                return _OutdoorTemperature;
            }
            set
            {
                OnOutdoorTemperatureChanging(value);
                ReportPropertyChanging("OutdoorTemperature");
                _OutdoorTemperature = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OutdoorTemperature");
                OnOutdoorTemperatureChanged();
            }
        }
        private global::System.Double _OutdoorTemperature;
        partial void OnOutdoorTemperatureChanging(global::System.Double value);
        partial void OnOutdoorTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Pressure
        {
            get
            {
                return _Pressure;
            }
            set
            {
                OnPressureChanging(value);
                ReportPropertyChanging("Pressure");
                _Pressure = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Pressure");
                OnPressureChanged();
            }
        }
        private global::System.Double _Pressure;
        partial void OnPressureChanging(global::System.Double value);
        partial void OnPressureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double WindAverage
        {
            get
            {
                return _WindAverage;
            }
            set
            {
                OnWindAverageChanging(value);
                ReportPropertyChanging("WindAverage");
                _WindAverage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WindAverage");
                OnWindAverageChanged();
            }
        }
        private global::System.Double _WindAverage;
        partial void OnWindAverageChanging(global::System.Double value);
        partial void OnWindAverageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double WindGust
        {
            get
            {
                return _WindGust;
            }
            set
            {
                OnWindGustChanging(value);
                ReportPropertyChanging("WindGust");
                _WindGust = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WindGust");
                OnWindGustChanged();
            }
        }
        private global::System.Double _WindGust;
        partial void OnWindGustChanging(global::System.Double value);
        partial void OnWindGustChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rain
        {
            get
            {
                return _Rain;
            }
            set
            {
                OnRainChanging(value);
                ReportPropertyChanging("Rain");
                _Rain = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rain");
                OnRainChanged();
            }
        }
        private global::System.Double _Rain;
        partial void OnRainChanging(global::System.Double value);
        partial void OnRainChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Byte _Status;
        partial void OnStatusChanging(global::System.Byte value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> WindDirectionId
        {
            get
            {
                return _WindDirectionId;
            }
            set
            {
                OnWindDirectionIdChanging(value);
                ReportPropertyChanging("WindDirectionId");
                _WindDirectionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WindDirectionId");
                OnWindDirectionIdChanged();
            }
        }
        private Nullable<global::System.Byte> _WindDirectionId;
        partial void OnWindDirectionIdChanging(Nullable<global::System.Byte> value);
        partial void OnWindDirectionIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DatabaseModel", "FK_WindDirection_WeatherSnapshot", "WindDirection")]
        public WindDirection WindDirection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WindDirection>("DatabaseModel.FK_WindDirection_WeatherSnapshot", "WindDirection").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WindDirection>("DatabaseModel.FK_WindDirection_WeatherSnapshot", "WindDirection").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WindDirection> WindDirectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WindDirection>("DatabaseModel.FK_WindDirection_WeatherSnapshot", "WindDirection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WindDirection>("DatabaseModel.FK_WindDirection_WeatherSnapshot", "WindDirection", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DatabaseModel", Name="WindDirection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WindDirection : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WindDirection object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="angle">Initial value of the Angle property.</param>
        public static WindDirection CreateWindDirection(global::System.Byte id, global::System.String description, global::System.Double angle)
        {
            WindDirection windDirection = new WindDirection();
            windDirection.Id = id;
            windDirection.Description = description;
            windDirection.Angle = angle;
            return windDirection;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Byte _Id;
        partial void OnIdChanging(global::System.Byte value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Angle
        {
            get
            {
                return _Angle;
            }
            set
            {
                OnAngleChanging(value);
                ReportPropertyChanging("Angle");
                _Angle = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Angle");
                OnAngleChanged();
            }
        }
        private global::System.Double _Angle;
        partial void OnAngleChanging(global::System.Double value);
        partial void OnAngleChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DatabaseModel", "FK_WindDirection_WeatherSnapshot", "WeatherSnapshot")]
        public EntityCollection<WeatherSnapshot> WeatherSnapshots
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WeatherSnapshot>("DatabaseModel.FK_WindDirection_WeatherSnapshot", "WeatherSnapshot");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WeatherSnapshot>("DatabaseModel.FK_WindDirection_WeatherSnapshot", "WeatherSnapshot", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
